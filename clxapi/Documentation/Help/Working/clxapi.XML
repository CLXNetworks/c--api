<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>clxapi</name>
  </assembly>
  <members>
    <member name="T:clxapi.Adapter.HttpAdapter">
      <summary>
            Adapter for Htttp requests to Clx api.
            </summary>
    </member>
    <member name="T:clxapi.Adapter.IHttpAdapter">
      <summary>
            Interface
            </summary>
    </member>
    <member name="M:clxapi.Adapter.IHttpAdapter.Get(System.String)">
      <summary>
            Method used by GET Requests
            </summary>
      <param name="url">string representing selected resource in api.</param>
      <returns>ClxResponse class</returns>
    </member>
    <member name="M:clxapi.Adapter.IHttpAdapter.Post(System.String,System.String)">
      <summary>
            Method used by POST Requests
            </summary>
      <param name="url">string representing selected resource in api.</param>
      <param name="body">string representing body of post.</param>
      <returns>throws new NotImplementedException</returns>
    </member>
    <member name="M:clxapi.Adapter.IHttpAdapter.Put(System.String,System.String)">
      <summary>
            Method used by PUT Requests
            </summary>
      <param name="url">string representing selected resource in api.</param>
      <param name="body">string representing body of PUT.</param>
      <returns>throws new NotImplementedException</returns>
    </member>
    <member name="P:clxapi.Adapter.IHttpAdapter.Auth">
      <summary>
            Property to set Auth.
            </summary>
    </member>
    <member name="M:clxapi.Adapter.HttpAdapter.Get(System.String)">
      <summary>
            Method used by GET Requests
            </summary>
      <param name="url">string representing selected resource in api.</param>
      <returns>ClxResponse class</returns>
    </member>
    <member name="M:clxapi.Adapter.HttpAdapter.Post(System.String,System.String)">
      <summary>
            Method used by POST Requests
            </summary>
      <param name="url">string representing selected resource in api.</param>
      <param name="body">string representing body of POST.</param>
      <returns>throws new NotImplementedException</returns>
    </member>
    <member name="M:clxapi.Adapter.HttpAdapter.Put(System.String,System.String)">
      <summary>
            Method used by PUT Requests
            </summary>
      <param name="url">string representing selected resource in api.</param>
      <param name="body">string representing body of PUT.</param>
      <returns>throws new NotImplementedException</returns>
    </member>
    <member name="M:clxapi.Adapter.HttpAdapter.Execute(System.String,System.String,System.String)">
      <summary>
            All Requests to Clx api goes through Execute.
            </summary>
      <param name="method">Type of Webrequest, GET,POST or PUT</param>
      <param name="url">string representing selected resource in api.</param>
      <param name="body">Default parameter, If POST or PUT contains data</param>
      <returns>ClxResponse which contains statuscode,body,header and error of request.</returns>
    </member>
    <member name="P:clxapi.Adapter.HttpAdapter.Auth">
      <summary>
            Property with Optional Get and Set option to set Authentication.
            </summary>
      <example>Code example set Auth:
            <code>
            var adapter = new HttpAdapter();
            adapter.Auth = new string[] { "Username", "Password" };
            </code></example>
      <example>Code example get Auth:
            <code>
            var adapter = new HttpAdapter();
            var auth = adapter.Auth;
            </code></example>
    </member>
    <member name="T:clxapi.Client.IHttpClient">
      <summary>
            Interface for ClxHttpClient.cs and TestHttpClient.cs
            </summary>
    </member>
    <member name="M:clxapi.Client.IHttpClient.Get(System.String)">
      <summary>
            Handles Requests of type GET.
            </summary>
      <param name="url">resourse String</param>
      <returns>Jarray or Jobject (dynamic)</returns>
    </member>
    <member name="M:clxapi.Client.IHttpClient.Post(System.String,System.String)">
      <summary>
            Handles Requests of type POST.
            </summary>
      <param name="url">resourse String</param>
      <param name="body">Body in form of a String</param>
      <returns>Jarray or Jobject (dynamic)</returns>
    </member>
    <member name="M:clxapi.Client.IHttpClient.Put(System.String,System.String)">
      <summary>
            Handles Requests of type PUT.
            </summary>
      <param name="url">resourse String</param>
      <param name="body">Body in form of a String</param>
      <returns>Jarray or Jobject (dynamic)</returns>
    </member>
    <member name="P:clxapi.Client.IHttpClient.BaseURL">
      <summary>
            Property to set BaseURL.
            </summary>
    </member>
    <member name="P:clxapi.Client.IHttpClient.HttpAdapter">
      <summary>
            Property to set what adapter to use.
            </summary>
    </member>
    <member name="T:clxapi.ClxSettings">
      <summary>
            Containts all paths and params toward Clx Api
            </summary>
    </member>
    <member name="F:clxapi.ClxSettings.OperatorPath">
      <summary>
            Path to operator toward Clx api.
            </summary>
    </member>
    <member name="F:clxapi.ClxSettings.GatewayPath">
      <summary>
            Path to gateway toward Clx api.
            </summary>
    </member>
    <member name="F:clxapi.ClxSettings.PricePath">
      <summary>
            Path to price toward Clx api.
            </summary>
    </member>
    <member name="F:clxapi.ClxSettings.DateParam">
      <summary>
            Param for date toward Clx api..
            </summary>
    </member>
    <member name="P:clxapi.ClxSettings.BaseURI">
      <summary>
            Property change baseURI
            </summary>
    </member>
    <member name="T:clxapi.ClxApi">
      <summary>
            Masterclass, To make request to Api, instance ClxApi and then call on chosen operator to retrieve data.
            </summary>
    </member>
    <member name="M:clxapi.ClxApi.#ctor(System.String[],clxapi.Adapter.IHttpAdapter)">
      <summary>
            Constructor, Initialize with credentials array, It will then setup all other dependendancies in project.
            </summary>
      <example>Code example:
            <code> var clxApi = new ClxApi(new string[] { "Username", "Password" }); </code></example>
      <param name="auth">Array with username and password for authentication.</param>
      <param name="httpAdapter">Optional parameter, to add support for test adapters.</param>
    </member>
    <member name="M:clxapi.ClxApi.SetBaseUrl(System.String)">
      <summary>
            Optional : Change base url for api.
            </summary>
      <example>Code example:
            <code> 
            var clxApi = new ClxApi(new string[] { "Username", "Password" }); 
            clxApi.SetBaseUrl("https://my-api.com/api")
            </code></example>
      <param name="url">Send Url string to root of api.</param>
    </member>
    <member name="M:clxapi.ClxApi.GetOperators">
      <summary>
            Returns all operators from Clx api.
            </summary>
      <example>Code example:
            <code> 
            try
            { 
                var clxApi = new ClxApi(new string[] { "Username", "Password" }); 
                var operators = clxApi.GetOperators();
            }
            catch (ClxException e)
            {
                string errrorMessage = e.Message;
            }
            catch (ClxApiException e)
            {
                string clxErrrorMessage = e.ClxErrorMessage;
                int? clxErrorCode = e.ClxErrorCode;
                int statusCode = e.StatusCode;
            }
            </code></example>
      <returns>IEnumerable list of all operators</returns>
    </member>
    <member name="M:clxapi.ClxApi.GetOperatorById(System.Int32)">
      <summary>
            Returns one operator from Clx api.
            </summary>
      <example>Code example:
            <code> 
            try
            { 
                var clxApi = new ClxApi(new string[] { "Username", "Password" }); 
                var operator = clxApi.GetOperatorByID(14);
            }
            catch (ClxException e)
            {
                string errrorMessage = e.Message;
            }
            catch (ClxApiException e)
            {
                string clxErrrorMessage = e.ClxErrorMessage;
                int? clxErrorCode = e.ClxErrorCode;
                int statusCode = e.StatusCode;
            }
            </code></example>
      <param name="id">Id of selected operator</param>
      <returns>Operator with selected id</returns>
    </member>
    <member name="M:clxapi.ClxApi.GetGateways">
      <summary>
            Returns all operators from Clx api.
            </summary>
      <example> Code example:
            <code>
            try
            {
                var clxApi = new ClxApi(new string[] { "Username", "Password" });
                var gateways = clxApi.GetGateways();
            }
            catch (ClxException e)
            {
                string errrorMessage = e.Message;
            }
            catch (ClxApiException e)
            {
                string clxErrrorMessage = e.ClxErrorMessage;
                int? clxErrorCode = e.ClxErrorCode;
                int statusCode = e.StatusCode;
            }
            </code></example>
      <returns>List of all gateways</returns>
    </member>
    <member name="M:clxapi.ClxApi.GetGatewayById(System.Int32)">
      <summary>
            Returns one gateway from Clx api.
            </summary>
      <example>Code example:
            <code> 
            try
            {
                var clxApi = new ClxApi(new string[] { "Username", "Password" });
                var gateway = clxApi.GetGatewayById(2182);
            }
            catch (ClxException e)
            {
                string errrorMessage = e.Message;
            }
            catch (ClxApiException e)
            {
                string clxErrrorMessage = e.ClxErrorMessage;
                int? clxErrorCode = e.ClxErrorCode;
                int statusCode = e.StatusCode;
            }
            </code></example>
      <param name="id">Id of selected gateway</param>
      <returns>Gateway with selected id</returns>
    </member>
    <member name="M:clxapi.ClxApi.GetPriceEntriesByGatewayId(System.Int32)">
      <summary>
            Returns all price entries from selected gateway.
            </summary>
      <example>Code example:
            <code> 
            try
            {
                var clxApi = new ClxApi(new string[] { "Username", "Password" });
                var priceEntries = clxApi.GetPriceEntriesByGatewayId(2183);
            }
            catch (ClxException e)
            {
                string errrorMessage = e.Message;               
            }
            catch (ClxApiException e)
            {
                string clxErrrorMessage = e.ClxErrorMessage;
                int? clxErrorCode = e.ClxErrorCode;
                int statusCode = e.StatusCode;
            }
            </code></example>
      <param name="id">Id of selected gateway</param>
      <returns>List of all price entries by selected gateway id.</returns>
    </member>
    <member name="M:clxapi.ClxApi.GetPriceEntriesByGatewayIdAndOperatorId(System.Int32,System.Int32)">
      <summary>
            Returns all price entries from selected gateway and selected operator.
            </summary>
      <example>Code example:
            <code> 
            try
            {
                var clxApi = new ClxApi(new string[] { "Username", "Password" });
                var priceEntry = clxApi.GetPriceEntriesByGatewayIdAndOperatorId(2182, 14);
            }
            catch (ClxException e)
            {
                string errrorMessage = e.Message;               
            }
            catch (ClxApiException e)
            {
                string clxErrrorMessage = e.ClxErrorMessage;
                int? clxErrorCode = e.ClxErrorCode;
                int statusCode = e.StatusCode;
            }
            </code></example>
      <param name="gatewayId">Id of selected gateway</param>
      <param name="operatorId">Id of selected operator</param>
      <returns>PriceEntry by selected gateway id and operator id.</returns>
    </member>
    <member name="M:clxapi.ClxApi.GetPriceEntriesByGatewayIdAndOperatorIdAndDate(System.Int32,System.Int32,System.DateTime)">
      <summary>
            Returns all price entries from selected gateway and selected operator by selected date.
            </summary>
      <example>Code example:
            <code>
            try
            {
                var clxApi = new ClxApi(new string[] { "Username", "Password" }); 
                var priceEntry = clxApi.GetPriceEntriesByGatewayIdAndOperatorIdAndDate(2182, 14, new DateTime(2014, 05, 12));
            }
            catch (ClxException e)
            {
                string errrorMessage = e.Message;               
            }
            catch (ClxApiException e)
            {
                string clxErrrorMessage = e.ClxErrorMessage;
                int? clxErrorCode = e.ClxErrorCode;
                int statusCode = e.StatusCode;
            }      
            </code></example>
      <param name="gatewayId">Id of selected gateway</param>
      <param name="operatorId">Id of selected operator</param>
      <param name="date">Selected date</param>
      <returns>PriceEntry by selected gateway id and operator id and operator id selected by Date.</returns>
    </member>
    <member name="P:clxapi.ClxApi.Client">
      <summary>
            Property to set client for api.
            </summary>
    </member>
    <member name="T:clxapi.Client.ClxHttpClient">
      <summary>
            Class to handle the Http request to Clx api.
            </summary>
    </member>
    <member name="M:clxapi.Client.ClxHttpClient.#ctor(System.String)">
      <summary>
             Constructor to initialize ClxHtttpClient: baseURL is url to Api.
            </summary>
      <example>Code example:
            <code> 
            var client = new ClxHttpClient("https://clx-aws.clxnetworks.com/api"); 
            </code></example>
      <param name="baseURL">String with baseUrl to api.</param>
    </member>
    <member name="M:clxapi.Client.ClxHttpClient.Get(System.String)">
      <summary>
            Handles Requests of type GET. Method concatinate BaseUrl resourse String and foward request to Excecute Method.
            </summary>
      <example>
      </example>
      <param name="url">resourse String</param>
      <returns>Jarray or Jobject (dynamic)</returns>
    </member>
    <member name="M:clxapi.Client.ClxHttpClient.Post(System.String,System.String)">
      <summary>
            Handles Requests of type POST. Not implemented
            </summary>
      <param name="url">resourse String</param>
      <param name="body">Body in form of a String</param>
      <returns>Jarray or Jobject (dynamic)</returns>
    </member>
    <member name="M:clxapi.Client.ClxHttpClient.Put(System.String,System.String)">
      <summary>
            Handles Requests of type PUT. Not implemented
            </summary>
      <param name="url">resourse String</param>
      <param name="body">Body in form of a String</param>
      <returns>Jarray or Jobject (dynamic)</returns>
    </member>
    <member name="M:clxapi.Client.ClxHttpClient.parseReponse(clxapi.ClxResponse)">
      <summary>
            Private Method to parse ClxResponse into Jarray or Jobject.
            </summary>
      <param name="response">
      </param>
      <returns>Jarray or Jobject</returns>
    </member>
    <member name="P:clxapi.Client.ClxHttpClient.HttpAdapter">
      <summary>
            Property to set what adapter to use.
            </summary>
    </member>
    <member name="P:clxapi.Client.ClxHttpClient.BaseURL">
      <summary>
            Property to set BaseURL.
            </summary>
    </member>
    <member name="T:clxapi.ClxApiException">
      <summary>
            Custom exception class inherits from Exception used to throw error from Clx API.
            </summary>
    </member>
    <member name="M:clxapi.ClxApiException.#ctor(System.String,System.Nullable{System.Int32},System.Int32)">
      <summary>
            Constructor set message and code.
            </summary>
      <param name="clxErrorMessage">Errormessage</param>
      <param name="clxErrorCode">ErrorCode</param>
      <param name="statusCode">ErrorCode</param>
    </member>
    <member name="P:clxapi.ClxApiException.ClxErrorCode">
      <summary>
            Property Containing Clx API internal Error Code.
            </summary>
    </member>
    <member name="P:clxapi.ClxApiException.ClxErrorMessage">
      <summary>
            Property Containing Clx API internal Error message.
            </summary>
    </member>
    <member name="P:clxapi.ClxApiException.StatusCode">
      <summary>
            Property Containing Http statuscode.
            </summary>
    </member>
    <member name="T:clxapi.ClxException">
      <summary>
            Class to handle exception from Library
            </summary>
    </member>
    <member name="M:clxapi.ClxException.#ctor(System.String)">
      <summary>
            ClxException class inherit from Exception.
            </summary>
      <param name="message">Errormessage</param>
    </member>
    <member name="T:clxapi.ClxResponse">
      <summary>
            Class with properties to return response data.
            </summary>
    </member>
    <member name="P:clxapi.ClxResponse.StatusCode">
      <summary>
            Property: Contains HttpStatuscode.
            </summary>
    </member>
    <member name="P:clxapi.ClxResponse.Header">
      <summary>
            Property: Contains header values.
            </summary>
    </member>
    <member name="P:clxapi.ClxResponse.Body">
      <summary>
            Property: Contains body values.
            </summary>
    </member>
    <member name="P:clxapi.ClxResponse.ErrorMessage">
      <summary>
            Property: Contains errormessage if Response body does not exist from ClxApi.
            </summary>
    </member>
    <member name="T:clxapi.Gateway">
      <summary>
            Model for databinding.
            </summary>
    </member>
    <member name="M:clxapi.Gateway.Stringyfy">
      <summary>
            Method used to Serialize property values from Gateway.
            </summary>
      <returns>String of property values</returns>
    </member>
    <member name="P:clxapi.Gateway.id">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Gateway.name">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Gateway.type">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="T:clxapi.Operator">
      <summary>
            Model for databinding.
            </summary>
    </member>
    <member name="M:clxapi.Operator.Stringyfy">
      <summary>
            Method used to Serialize property values from Operator.
            </summary>
      <returns>String of property values</returns>
    </member>
    <member name="P:clxapi.Operator.id">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Operator.name">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Operator.network">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Operator.uniqueName">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Operator.isoCountryCode">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Operator.operationalState">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Operator.operationalStatDate">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.Operator.numberOfSubscribers">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="T:clxapi.PriceEntry">
      <summary>
            Model for databinding.
            </summary>
    </member>
    <member name="M:clxapi.PriceEntry.Stringyfy">
      <summary>
            Method used to Serialize property values from PriceEntry.
            </summary>
      <returns>String of property values</returns>
    </member>
    <member name="P:clxapi.PriceEntry.price">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.PriceEntry.gateway">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.PriceEntry.operator">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="P:clxapi.PriceEntry.expireDate">
      <summary>
            Property for databinding.
            </summary>
    </member>
    <member name="T:clxapi.App_Data.TestData">
      <summary>
            Class contains testdata for tests.
            </summary>
    </member>
    <member name="P:clxapi.App_Data.TestData.operators">
      <summary>
            Returns array of Operator for tests.
            </summary>
    </member>
    <member name="P:clxapi.App_Data.TestData.operator">
      <summary>
            Returns one Operator for tests.
            </summary>
    </member>
    <member name="P:clxapi.App_Data.TestData.Gateways">
      <summary>
            Returns array of Gateway for tests. 
            </summary>
    </member>
    <member name="P:clxapi.App_Data.TestData.Gateway">
      <summary>
            Returns one Gateway object for Tests.
            </summary>
    </member>
    <member name="R:Project_Documentation">
      <summary>C# wrapper for Clx api.</summary>
    </member>
    <member name="N:clxapi">
      <summary>Namespace for C# Wrapper toward Clx api.</summary>
    </member>
    <member name="N:clxapi.Adapter">
      <summary>Contains adapter to parse data and bind it to ClxResponse model.</summary>
    </member>
    <member name="N:clxapi.Client">
      <summary>Namespace contains ClxHttpClient act as a service layer between ClxApi and HttpAdapter. Funcitonality of Namespace also include Exception handling.</summary>
    </member>
  </members>
</doc>